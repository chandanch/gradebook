/**
* File Class provides methods to
* 1. Create a file  2. Open a file  3. Write to a file as a new line
* Note: Once the file is opened for read/write it must be closed explicitly using Close() or using Dispose()
*/

public class DiskBook : Book
{
    public DiskBook(string name) : base(name)
    {
    }

    public override event GradeAddedDelegate GradeAdded;

    public override void AddGrade(double grade)
    {
        
        // create file if not exists with a custom file name
        // Open the file
        // AppendText() exposes an StreamWriter with which we can write to the file
        var writer = File.AppendText($"{Name}.txt");
        // writes the new line with the file
        writer.WriteLine(grade);
        writer.Close();
    }

   public override void AddGrade(double grade)
    {
        
        // 'using' provides an overloaded method that works with an IDisposable interface
        // any object that implements an IDisposable interface can be wrapped within using(){...} statement
        // with using statement C# compiler ensures that writer.Dispose() is called automatically and that
        // all the exceptions within the using statement are handled
        using(var writer = File.AppendText($"{Name}.txt"))
        {
            writer.WriteLine(grade);
            if(GradeAdded != null)
            {
                GradeAdded(this, new EventArgs());
            }
        }
    }
}