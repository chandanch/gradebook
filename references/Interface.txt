/**
* Interface allows us to create pure definitions for a specifc type
* Interface does not contain any implementations
* Interface allows us to describe a specific type
* Syntax: <access_modifier> interface <interface_name>
*/

// creation of interface
public interface IBook
{
    // interface does not contain any implementation for a method
    void AddGrade(double grade);
    // defining the method with its type
    Statistics GetStatistics();
    string Name {
        get;
    }
    event GradeAddedDelegate GradeAdded;
}

// class implementing an interface
// A class could implement multiple interfaces
public abstract class Book : NamedObject, IBook
{
    public Book(string name) : base(name)
    {
    }

    // virtual keyword is similar to abstract which defines the method as virtual
    public virtual event GradeAddedDelegate GradeAdded;

    public abstract void AddGrade(double grade);

    public virtual Statistics GetStatistics()
    {
        throw new NotImplementedException();
    }
}

public class InMemoryBook : Book
{
    public override void AddGrade(double grade) 
        {
            if (grade <= 100 && grade >= 0)
            {
                grades.Add(grade);   
                if (GradeAdded != null)
                {
                    GradeAdded(this, new EventArgs()); 
                }
                
            }
            else 
            {
                throw new ArgumentException($"Invalid input for {nameof(grade)}"); 
            }
            // Console.WriteLine($"Added Grade: {grade}");
        }

        public override event GradeAddedDelegate GradeAdded;

        public override Statistics GetStatistics() {
            
            var result = new Statistics();
            result.Highest = double.MinValue;
            result.Lowest = double.MaxValue;

            for(var index = 0; index < grades.Count; index += 1)
            {
                result.Highest = Math.Max(result.Highest, grades[index]);
                result.Lowest = Math.Min(result.Lowest, grades[index]);
                result.Average += grades[index];
            }
            
            result.Average /=  grades.Count;

            switch(result.Average) {
                case var d when d >= 90:
                    result.Letter = 'A';
                    break;
                case var d when d >= 80:
                    result.Letter = 'B';
                    break;
                case var d when d >= 70:
                    result.Letter = 'C';
                    break;
                case var d when d >= 60:
                    result.Letter = 'D';
                    break;
                default:
                    result.Letter = 'F';
                    break;
            }

            return result;
        }
}